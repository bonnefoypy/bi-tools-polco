#!/usr/bin/env python3
"""
POLCO ACTIONS PROCESSOR v3 - Propositions d'Actions
G√©n√®re des propositions d'actions strat√©giques bas√©es sur les 4 analyses pr√©c√©dentes.
"""

import os
import logging
from typing import Dict, Any, Optional, List
from datetime import datetime
from polco_llm_client import get_llm_client

# Configuration
PROJECT_ID = "polcoaigeneration-ved6"
REGION = "us-central1"
MODEL_NAME = "gemini-2.5-flash"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PolcoActionsProcessorV3:
    """Processeur ACTIONS v3 pour propositions d'actions strat√©giques."""
    
    def __init__(self, captation_collection="polco_magasins_captation"):
        self.llm_client = get_llm_client()
        self.captation_collection = captation_collection
    

    def init_vertex_ai(self) -> bool:
        """Initialise Vertex AI."""
        try:
            # Le client LLM est d√©j√† initialis√© dans le constructeur
            logger.info(f"‚úÖ Client LLM standardis√© initialis√© ({MODEL_NAME})")
            return True
        except Exception as e:
            logger.error(f"‚ùå Erreur Vertex AI: {e}")
            return False
    
    def get_captation_results(self, store_id: str) -> str:
        """R√©cup√®re les r√©sultats de captation depuis polco_magasins_enhanced."""
        try:
            from google.cloud import firestore
            db = firestore.Client(project="polcoaigeneration-ved6")
            doc_ref = db.collection(self.captation_collection).document(f"store_{store_id}")
            doc = doc_ref.get()
            
            if not doc.exists:
                logger.warning(f"‚ö†Ô∏è Aucun r√©sultat de captation trouv√© pour store {store_id}")
                return ""
            
            data = doc.to_dict()
            prompts_results = data.get('prompts_results', {})
            
            if len(prompts_results) < 6:
                logger.warning(f"‚ö†Ô∏è Store {store_id}: seulement {len(prompts_results)}/6 prompts disponibles")
                return ""
            
            # Fusionner tous les r√©sultats de captation
            captation_content = "\n=== R√âSULTATS DE CAPTATION (6 PROMPTS) ===\n"
            for prompt_key, prompt_data in prompts_results.items():
                if prompt_data.get('status') == 'completed' and prompt_data.get('response'):
                    captation_content += f"\n--- {prompt_key.upper()} ---\n{prompt_data['response']}\n"
            
            logger.info(f"‚úÖ Store {store_id}: {len(prompts_results)} prompts de captation r√©cup√©r√©s")
            return captation_content
            
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration captation store {store_id}: {e}")
            return ""
    
    def extract_sections_content(self, sections_data: List[Dict[str, Any]]) -> Dict[str, str]:
        """Extrait le contenu des 4 sections pr√©c√©dentes."""
        
        sections_content = {
            'CONTEXTE': '',
            'CIBLES': '',
            'POTENTIEL': '',
            'OFFRE': ''
        }
        
        for section_data in sections_data:
            section_name = section_data.get('section', '')
            section_content = section_data.get('content', '')
            
            if section_name in sections_content:
                sections_content[section_name] = section_content
        
        return sections_content
    
    def build_actions_prompt(self, store_id: str, sections_content: Dict[str, str], country: str, language: str, captation_content: str = "") -> str:
        """Construit le prompt pour les propositions d'actions."""
        
        prompt = f"""Tu es un consultant retail expert. G√©n√®re des propositions d'actions strat√©giques DIRECTEMENT UTILISABLES dans un rapport professionnel.

üåç **LOCALISATION ET ACTUALIT√â OBLIGATOIRES:**

- R√âDIGER ENTI√àREMENT la r√©ponse en {language}
- Adapter les actions au contexte r√©glementaire et culturel du pays {country}

üïê **V√âRIFICATION D'ACTUALIT√â CRITIQUE:**
- PROPOSER uniquement des actions r√©alisables et actuelles (2024-2025)
- TENIR COMPTE des √©volutions r√©centes du march√© retail
- EXCLURE les actions devenues obsol√®tes ou non pertinentes
- ADAPTER aux tendances et r√©glementations locales actuelles

=== INSTRUCTIONS CRITIQUES ===
- NE PAS inclure de formules de politesse ("Voici", "Absolument", etc.)
- NE PAS mentionner de limitations de donn√©es ou fichiers manquants
- NE PAS r√©p√©ter les instructions
- G√©n√©rer UNIQUEMENT le contenu du rapport
- Format Markdown professionnel
- Ton factuel et analytique
- CONSERVER TOUS LES D√âTAILS des donn√©es ultra enhanced (chiffres exacts, noms pr√©cis, adresses, coordonn√©es)
- D√âVELOPPER EXHAUSTIVEMENT plut√¥t que r√©sumer
- INT√âGRER TOUS les √©l√©ments factuels des analyses sectorielles
- OBLIGATOIRE : Pr√©ciser que ces actions sont propos√©es par Intelligence Artificielle
- ADAPTER le vocabulaire et les actions au contexte {country}
- **PR√âF√âRER LES TABLEAUX** aux listes complexes pour une meilleure lisibilit√© et mise en forme
- Utiliser des tableaux Markdown pour les donn√©es structur√©es (actions, priorit√©s, √©ch√©anciers)
- √âviter les listes √† puces trop longues ou complexes

=== DONN√âES DISPONIBLES POUR LE MAGASIN {store_id} ===

## ANALYSES SECTORIELLES (4 PROCESSEURS) :

### CONTEXTE :
{sections_content.get('CONTEXTE', 'Non disponible')}

### CIBLES :
{sections_content.get('CIBLES', 'Non disponible')}

### POTENTIEL :
{sections_content.get('POTENTIEL', 'Non disponible')}

### OFFRE :
{sections_content.get('OFFRE', 'Non disponible')}

## DONN√âES DE CAPTATION (6 PROMPTS) :
{captation_content if captation_content else 'Non disponible'}

=== CONTENU √Ä G√âN√âRER ===

## V. PROPOSITIONS D'ACTIONS √Ä CHALLENGER PAR VOS √âQUIPES

**‚ö†Ô∏è AVERTISSEMENT** : Ces propositions d'actions sont g√©n√©r√©es par Intelligence Artificielle sur la base des analyses pr√©c√©dentes. Elles constituent des pistes de r√©flexion √† challenger, adapter et valider avec vos √©quipes terrain et votre connaissance du march√© local.

### 5.1 Actions Court Terme (0-6 mois)

[Pour chaque action propos√©e, indiquer :]
- **Action** : Description pr√©cise
- **Objectif** : Impact attendu
- **Difficult√©** : ‚≠ê (Facile) √† ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (Tr√®s difficile)
- **Ressources** : Moyens n√©cessaires
- **Indicateurs** : Comment mesurer le succ√®s

### 5.2 Actions Moyen Terme (6-18 mois)

[M√™me structure que court terme]

### 5.3 Actions Long Terme (18+ mois)

[M√™me structure que court terme]

### 5.4 Priorisation et Feuille de Route

[Synth√®se des actions prioritaires avec √©ch√©ancier]

=== G√âN√âRATION ===
G√©n√®re maintenant le contenu complet selon cette structure, en te basant EXCLUSIVEMENT sur les analyses fournies. Propose des actions concr√®tes, r√©alistes et mesurables.
"""
        
        return prompt
    
    def process_store(self, store_data: Dict[str, Any], sections_data: List[Dict[str, Any]], country: str, language: str) -> Optional[Dict[str, Any]]:
        """Traite un magasin pour les propositions d'actions."""
        
        store_id = store_data.get('store_id', 'unknown')
        logger.info(f"üéØ PROCESSEUR ACTIONS v3 - Magasin {store_id}")
        
        try:
            # Initialiser Vertex AI
            if not self.init_vertex_ai():
                return None
            
            # Extraire le contenu des sections pr√©c√©dentes
            sections_content = self.extract_sections_content(sections_data)
            
            # R√©cup√©rer les donn√©es de captation
            captation_content = self.get_captation_results(store_id)
            
            # V√©rifier qu'on a au moins quelques sections
            available_sections = [k for k, v in sections_content.items() if v.strip()]
            if len(available_sections) < 2:
                logger.error(f"‚ùå Pas assez de sections disponibles pour {store_id}")
                return None
            
            logger.info(f"üìä Sections analys√©es : {', '.join(available_sections)}")
            if captation_content:
                logger.info(f"üìä Donn√©es de captation : {len(captation_content)} caract√®res")
            
            # Construire le prompt
            prompt = self.build_actions_prompt(store_id, sections_content, country, language, captation_content)
            
            logger.info(f"üéØ G√©n√©ration propositions ACTIONS magasin {store_id}")
            logger.info(f"üìù Prompt actions: {len(prompt)} caract√®res")
            
            # G√©n√©rer l'analyse avec retry
            start_time = datetime.now()
            max_retries = 3
            
            for attempt in range(max_retries):
                try:
                    response = self.model.generate_content(
                        prompt,
                        generation_config={
                            "max_output_tokens": 32000,  
                            "temperature": 0.3,  # Cr√©atif mais pas trop
                            "top_p": 0.8,
                            "top_k": 40
                        }
                    )
                    break  # Succ√®s, sortir de la boucle
                except Exception as e:
                    if attempt < max_retries - 1:
                        wait_time = (attempt + 1) * 5
                        logger.warning(f"‚ö†Ô∏è Erreur API Vertex (tentative {attempt + 1}/{max_retries}): {e}")
                        logger.info(f"‚è≥ Attente {wait_time}s avant nouvelle tentative...")
                        import time
                        time.sleep(wait_time)
                    else:
                        raise e
            
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            
            if response_text:
                result_length = len(response_text)
                logger.info(f"‚úÖ Actions v3 g√©n√©r√©es: {result_length} caract√®res en {duration:.1f}s")
                
                return {
                    'section': 'ACTIONS',
                    'content': response_text,
                    'metadata': {
                        'store_id': store_id,
                        'generation_time': duration,
                        'input_length': len(prompt),
                        'output_length': result_length,
                        'timestamp': datetime.now().isoformat(),
                        'model_used': MODEL_NAME,
                        'version': 'v3_standardized',
                        'sections_analyzed': available_sections
                    }
                }
            else:
                logger.error(f"‚ùå R√©ponse vide pour {store_id}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Erreur traitement actions v3 {store_id}: {e}")
            return None


def main():
    """Point d'entr√©e pour test."""
    processor = PolcoActionsProcessorV3()
    logger.info("üéØ Test Processeur ACTIONS v3")
    logger.info("‚úÖ Processeur ACTIONS v3 initialis√©")

if __name__ == "__main__":
    main()
